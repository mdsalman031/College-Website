{"ast":null,"code":"var _jsxFileName = \"D:\\\\college-website-project\\\\src\\\\EventModal.jsx\",\n  _s = $RefreshSig$();\n// EventModal.js\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventModal = ({\n  date,\n  closeModal,\n  handleEventSave\n}) => {\n  _s();\n  const [eventText, setEventText] = useState('');\n  const [existingEvent, setExistingEvent] = useState(null);\n  useEffect(() => {\n    // Check if there is an existing event for the selected date\n    const storedEvents = JSON.parse(localStorage.getItem('events')) || [];\n    const existingEventForDate = storedEvents.find(event => event.date === date.toDateString());\n    if (existingEventForDate) {\n      setExistingEvent(existingEventForDate);\n      setEventText(existingEventForDate.text);\n    } else {\n      setExistingEvent(null);\n      setEventText('');\n    }\n  }, [date]);\n  const handleSaveEvent = () => {\n    const newEvent = {\n      date: date.toDateString(),\n      text: eventText\n    };\n\n    // Update local storage with the new event\n    const storedEvents = JSON.parse(localStorage.getItem('events')) || [];\n    const updatedEvents = storedEvents.filter(event => event.date !== date.toDateString());\n    localStorage.setItem('events', JSON.stringify([...updatedEvents, newEvent]));\n\n    // Trigger the parent component to update events and close the modal\n    handleEventSave();\n\n    // Clear input field after saving\n    setEventText('');\n    setExistingEvent(newEvent);\n  };\n  const handleDeleteEvent = () => {\n    // Delete the event for the selected date\n    const storedEvents = JSON.parse(localStorage.getItem('events')) || [];\n    const updatedEvents = storedEvents.filter(event => event.date !== date.toDateString());\n    localStorage.setItem('events', JSON.stringify(updatedEvents));\n\n    // Trigger the parent component to update events and close the modal\n    handleEventSave();\n\n    // Clear input field after deleting\n    setEventText('');\n    setExistingEvent(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"close\",\n        onClick: closeModal,\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [existingEvent ? 'Edit Event' : 'Add Event', \" for \", date.toDateString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: eventText,\n        onChange: e => setEventText(e.target.value),\n        placeholder: \"Enter event description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSaveEvent,\n        children: existingEvent ? 'Update Event' : 'Save Event'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), existingEvent && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDeleteEvent,\n        className: \"delete-event-btn\",\n        children: \"Delete Event\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(EventModal, \"ucBLTpVCuQPSCHOwLbGkwOTsnic=\");\n_c = EventModal;\nexport default EventModal;\nvar _c;\n$RefreshReg$(_c, \"EventModal\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","EventModal","date","closeModal","handleEventSave","_s","eventText","setEventText","existingEvent","setExistingEvent","storedEvents","JSON","parse","localStorage","getItem","existingEventForDate","find","event","toDateString","text","handleSaveEvent","newEvent","updatedEvents","filter","setItem","stringify","handleDeleteEvent","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["D:/college-website-project/src/EventModal.jsx"],"sourcesContent":["// EventModal.js\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nconst EventModal = ({ date, closeModal, handleEventSave }) => {\r\n  const [eventText, setEventText] = useState('');\r\n  const [existingEvent, setExistingEvent] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Check if there is an existing event for the selected date\r\n    const storedEvents = JSON.parse(localStorage.getItem('events')) || [];\r\n    const existingEventForDate = storedEvents.find((event) => event.date === date.toDateString());\r\n\r\n    if (existingEventForDate) {\r\n      setExistingEvent(existingEventForDate);\r\n      setEventText(existingEventForDate.text);\r\n    } else {\r\n      setExistingEvent(null);\r\n      setEventText('');\r\n    }\r\n  }, [date]);\r\n\r\n  const handleSaveEvent = () => {\r\n    const newEvent = { date: date.toDateString(), text: eventText };\r\n\r\n    // Update local storage with the new event\r\n    const storedEvents = JSON.parse(localStorage.getItem('events')) || [];\r\n    const updatedEvents = storedEvents.filter((event) => event.date !== date.toDateString());\r\n    localStorage.setItem('events', JSON.stringify([...updatedEvents, newEvent]));\r\n\r\n    // Trigger the parent component to update events and close the modal\r\n    handleEventSave();\r\n\r\n    // Clear input field after saving\r\n    setEventText('');\r\n    setExistingEvent(newEvent);\r\n  };\r\n\r\n  const handleDeleteEvent = () => {\r\n    // Delete the event for the selected date\r\n    const storedEvents = JSON.parse(localStorage.getItem('events')) || [];\r\n    const updatedEvents = storedEvents.filter((event) => event.date !== date.toDateString());\r\n    localStorage.setItem('events', JSON.stringify(updatedEvents));\r\n\r\n    // Trigger the parent component to update events and close the modal\r\n    handleEventSave();\r\n\r\n    // Clear input field after deleting\r\n    setEventText('');\r\n    setExistingEvent(null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"modal\">\r\n      <div className=\"modal-content\">\r\n        <span className=\"close\" onClick={closeModal}>&times;</span>\r\n        <h3>{existingEvent ? 'Edit Event' : 'Add Event'} for {date.toDateString()}</h3>\r\n        <textarea\r\n          value={eventText}\r\n          onChange={(e) => setEventText(e.target.value)}\r\n          placeholder=\"Enter event description\"\r\n        />\r\n        <button onClick={handleSaveEvent}>{existingEvent ? 'Update Event' : 'Save Event'}</button>\r\n        {existingEvent && (\r\n          <button onClick={handleDeleteEvent} className=\"delete-event-btn\">Delete Event</button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EventModal;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\college-website-project\\\\src\\\\EventModal.jsx\",\n  _s = $RefreshSig$();\n// EventModal.js\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventModal = ({\n  date,\n  closeModal\n}) => {\n  _s();\n  const [eventText, setEventText] = useState('');\n  const handleSaveEvent = () => {\n    // Handle saving the event, for example, by calling an API or updating local storage\n    console.log(`Event saved for ${date.toDateString()}: ${eventText}`);\n\n    // Close the modal\n    closeModal();\n  };\n\n  // Retrieve events for the current date (you can replace this logic based on your data source)\n  const eventsForDate = []; // Add your logic to retrieve events\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"close\",\n        onClick: closeModal,\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Add Event for \", date.toDateString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: eventText,\n        onChange: e => setEventText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSaveEvent,\n        children: \"Save Event\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"event-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Events for \", date.toDateString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this), eventsForDate.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No events for this date.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: eventsForDate.map((event, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: event\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n_s(EventModal, \"veIJ/djk+scGzFUIfWwgPJ4oyhI=\");\n_c = EventModal;\nexport default EventModal;\nvar _c;\n$RefreshReg$(_c, \"EventModal\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","EventModal","date","closeModal","_s","eventText","setEventText","handleSaveEvent","console","log","toDateString","eventsForDate","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","length","map","event","index","_c","$RefreshReg$"],"sources":["D:/college-website-project/src/EventModal.jsx"],"sourcesContent":["// EventModal.js\r\nimport React, { useState } from 'react';\r\n\r\nconst EventModal = ({ date, closeModal }) => {\r\n  const [eventText, setEventText] = useState('');\r\n\r\n  const handleSaveEvent = () => {\r\n    // Handle saving the event, for example, by calling an API or updating local storage\r\n    console.log(`Event saved for ${date.toDateString()}: ${eventText}`);\r\n    \r\n    // Close the modal\r\n    closeModal();\r\n  };\r\n\r\n  // Retrieve events for the current date (you can replace this logic based on your data source)\r\n  const eventsForDate = []; // Add your logic to retrieve events\r\n\r\n  return (\r\n    <div className=\"modal\">\r\n      <div className=\"modal-content\">\r\n        <span className=\"close\" onClick={closeModal}>&times;</span>\r\n        <h3>Add Event for {date.toDateString()}</h3>\r\n        <textarea value={eventText} onChange={(e) => setEventText(e.target.value)} />\r\n        <button onClick={handleSaveEvent}>Save Event</button>\r\n\r\n        <div className=\"event-list\">\r\n          <h4>Events for {date.toDateString()}</h4>\r\n          {eventsForDate.length === 0 ? (\r\n            <p>No events for this date.</p>\r\n          ) : (\r\n            <ul>\r\n              {eventsForDate.map((event, index) => (\r\n                <li key={index}>{event}</li>\r\n              ))}\r\n            </ul>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EventModal;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,UAAU,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EAC3C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAE9C,MAAMS,eAAe,GAAGA,CAAA,KAAM;IAC5B;IACAC,OAAO,CAACC,GAAG,CAAE,mBAAkBP,IAAI,CAACQ,YAAY,CAAC,CAAE,KAAIL,SAAU,EAAC,CAAC;;IAEnE;IACAF,UAAU,CAAC,CAAC;EACd,CAAC;;EAED;EACA,MAAMQ,aAAa,GAAG,EAAE,CAAC,CAAC;;EAE1B,oBACEX,OAAA;IAAKY,SAAS,EAAC,OAAO;IAAAC,QAAA,eACpBb,OAAA;MAAKY,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAC5Bb,OAAA;QAAMY,SAAS,EAAC,OAAO;QAACE,OAAO,EAAEX,UAAW;QAAAU,QAAA,EAAC;MAAO;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAC3DlB,OAAA;QAAAa,QAAA,GAAI,gBAAc,EAACX,IAAI,CAACQ,YAAY,CAAC,CAAC;MAAA;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAC5ClB,OAAA;QAAUmB,KAAK,EAAEd,SAAU;QAACe,QAAQ,EAAGC,CAAC,IAAKf,YAAY,CAACe,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC7ElB,OAAA;QAAQc,OAAO,EAAEP,eAAgB;QAAAM,QAAA,EAAC;MAAU;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAErDlB,OAAA;QAAKY,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACzBb,OAAA;UAAAa,QAAA,GAAI,aAAW,EAACX,IAAI,CAACQ,YAAY,CAAC,CAAC;QAAA;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,EACxCP,aAAa,CAACY,MAAM,KAAK,CAAC,gBACzBvB,OAAA;UAAAa,QAAA,EAAG;QAAwB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,gBAE/BlB,OAAA;UAAAa,QAAA,EACGF,aAAa,CAACa,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,kBAC9B1B,OAAA;YAAAa,QAAA,EAAiBY;UAAK,GAAbC,KAAK;YAAAX,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAa,CAC5B;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACA,CACL;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACd,EAAA,CArCIH,UAAU;AAAA0B,EAAA,GAAV1B,UAAU;AAuChB,eAAeA,UAAU;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
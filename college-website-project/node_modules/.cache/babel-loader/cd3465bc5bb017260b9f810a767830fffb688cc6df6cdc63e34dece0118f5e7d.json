{"ast":null,"code":"var _jsxFileName = \"D:\\\\college-website-project\\\\src\\\\EventManagement.jsx\",\n  _s = $RefreshSig$();\n// EventManagement.js\nimport React, { useState, useEffect } from 'react';\nimport Calendar from 'react-calendar';\nimport EventModal from './EventModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventManagement = () => {\n  _s();\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [isModalOpen, setModalOpen] = useState(false);\n  const [events, setEvents] = useState([]);\n  useEffect(() => {\n    const storedEvents = JSON.parse(localStorage.getItem('events')) || [];\n    setEvents(storedEvents);\n  }, [isModalOpen]);\n  const handleDateClick = date => {\n    setSelectedDate(date);\n    setModalOpen(true);\n  };\n  const handleEventSave = () => {\n    const storedEvents = JSON.parse(localStorage.getItem('events')) || [];\n    const updatedEvents = [...storedEvents, {\n      date: selectedDate.toDateString(),\n      text: 'Your text here'\n    }];\n    localStorage.setItem('events', JSON.stringify(updatedEvents));\n    setEvents(updatedEvents);\n    setModalOpen(false);\n  };\n  const handleDeleteEvent = () => {\n    const storedEvents = JSON.parse(localStorage.getItem('events')) || [];\n    const updatedEvents = storedEvents.filter(event => event.date !== selectedDate.toDateString());\n    localStorage.setItem('events', JSON.stringify(updatedEvents));\n    setEvents(updatedEvents);\n    setModalOpen(false);\n  };\n  const tileContent = ({\n    date,\n    view\n  }) => {\n    const eventsForDate = events.filter(event => event.date === date.toDateString());\n    if (view === 'month' && eventsForDate.length > 0) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"event-date\",\n        children: eventsForDate.length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 14\n      }, this);\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"custom-calendar-container\",\n    children: [/*#__PURE__*/_jsxDEV(Calendar, {\n      onClickDay: handleDateClick,\n      value: selectedDate,\n      tileContent: tileContent,\n      className: \"custom-calendar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), isModalOpen && /*#__PURE__*/_jsxDEV(EventModal, {\n      date: selectedDate,\n      existingEvent: events.find(event => event.date === selectedDate.toDateString()),\n      closeModal: () => setModalOpen(false),\n      handleEventSave: handleEventSave,\n      handleDeleteEvent: handleDeleteEvent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"event-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Events for \", selectedDate.toDateString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 3\n      }, this), events.map(event => {\n        if (event.date === selectedDate.toDateString()) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: /*#__PURE__*/_jsxDEV(\"li\", {\n                children: event.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 13\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 11\n            }, this)\n          }, event.date, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 9\n          }, this);\n        }\n        return null;\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(EventManagement, \"XtyP1GEwC5bU0k3LMOL1CFin8xs=\");\n_c = EventManagement;\nexport default EventManagement;\nvar _c;\n$RefreshReg$(_c, \"EventManagement\");","map":{"version":3,"names":["React","useState","useEffect","Calendar","EventModal","jsxDEV","_jsxDEV","EventManagement","_s","selectedDate","setSelectedDate","Date","isModalOpen","setModalOpen","events","setEvents","storedEvents","JSON","parse","localStorage","getItem","handleDateClick","date","handleEventSave","updatedEvents","toDateString","text","setItem","stringify","handleDeleteEvent","filter","event","tileContent","view","eventsForDate","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClickDay","value","existingEvent","find","closeModal","map","_c","$RefreshReg$"],"sources":["D:/college-website-project/src/EventManagement.jsx"],"sourcesContent":["// EventManagement.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport EventModal from './EventModal';\r\n\r\nconst EventManagement = () => {\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n  const [isModalOpen, setModalOpen] = useState(false);\r\n  const [events, setEvents] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const storedEvents = JSON.parse(localStorage.getItem('events')) || [];\r\n    setEvents(storedEvents);\r\n  }, [isModalOpen]);\r\n\r\n  const handleDateClick = (date) => {\r\n    setSelectedDate(date);\r\n    setModalOpen(true);\r\n  };\r\n\r\n  const handleEventSave = () => {\r\n    const storedEvents = JSON.parse(localStorage.getItem('events')) || [];\r\n    const updatedEvents = [...storedEvents, { date: selectedDate.toDateString(), text: 'Your text here' }];\r\n    localStorage.setItem('events', JSON.stringify(updatedEvents));\r\n    setEvents(updatedEvents);\r\n    setModalOpen(false);\r\n  };\r\n\r\n  const handleDeleteEvent = () => {\r\n    const storedEvents = JSON.parse(localStorage.getItem('events')) || [];\r\n    const updatedEvents = storedEvents.filter((event) => event.date !== selectedDate.toDateString());\r\n    localStorage.setItem('events', JSON.stringify(updatedEvents));\r\n    setEvents(updatedEvents);\r\n    setModalOpen(false);\r\n  };\r\n\r\n  const tileContent = ({ date, view }) => {\r\n    const eventsForDate = events.filter((event) => event.date === date.toDateString());\r\n\r\n    if (view === 'month' && eventsForDate.length > 0) {\r\n      return <p className=\"event-date\">{eventsForDate.length}</p>;\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <div className=\"custom-calendar-container\">\r\n      <Calendar\r\n        onClickDay={handleDateClick}\r\n        value={selectedDate}\r\n        tileContent={tileContent}\r\n        className=\"custom-calendar\"\r\n      />\r\n      {isModalOpen && (\r\n        <EventModal\r\n          date={selectedDate}\r\n          existingEvent={events.find((event) => event.date === selectedDate.toDateString())}\r\n          closeModal={() => setModalOpen(false)}\r\n          handleEventSave={handleEventSave}\r\n          handleDeleteEvent={handleDeleteEvent}\r\n        />\r\n      )}\r\n      <div className=\"event-list\">\r\n  <h4>Events for {selectedDate.toDateString()}</h4>\r\n  {events.map((event) => {\r\n    if (event.date === selectedDate.toDateString()) {\r\n      return (\r\n        <div key={event.date}>\r\n          <ul>\r\n            <li>{event.text}</li>\r\n          </ul>\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  })}\r\n</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EventManagement;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,gBAAgB;AACrC,OAAOC,UAAU,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,IAAIU,IAAI,CAAC,CAAC,CAAC;EAC5D,MAAM,CAACC,WAAW,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACa,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMc,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE;IACrEL,SAAS,CAACC,YAAY,CAAC;EACzB,CAAC,EAAE,CAACJ,WAAW,CAAC,CAAC;EAEjB,MAAMS,eAAe,GAAIC,IAAI,IAAK;IAChCZ,eAAe,CAACY,IAAI,CAAC;IACrBT,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC;EAED,MAAMU,eAAe,GAAGA,CAAA,KAAM;IAC5B,MAAMP,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE;IACrE,MAAMI,aAAa,GAAG,CAAC,GAAGR,YAAY,EAAE;MAAEM,IAAI,EAAEb,YAAY,CAACgB,YAAY,CAAC,CAAC;MAAEC,IAAI,EAAE;IAAiB,CAAC,CAAC;IACtGP,YAAY,CAACQ,OAAO,CAAC,QAAQ,EAAEV,IAAI,CAACW,SAAS,CAACJ,aAAa,CAAC,CAAC;IAC7DT,SAAS,CAACS,aAAa,CAAC;IACxBX,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC;EAED,MAAMgB,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,MAAMb,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE;IACrE,MAAMI,aAAa,GAAGR,YAAY,CAACc,MAAM,CAAEC,KAAK,IAAKA,KAAK,CAACT,IAAI,KAAKb,YAAY,CAACgB,YAAY,CAAC,CAAC,CAAC;IAChGN,YAAY,CAACQ,OAAO,CAAC,QAAQ,EAAEV,IAAI,CAACW,SAAS,CAACJ,aAAa,CAAC,CAAC;IAC7DT,SAAS,CAACS,aAAa,CAAC;IACxBX,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC;EAED,MAAMmB,WAAW,GAAGA,CAAC;IAAEV,IAAI;IAAEW;EAAK,CAAC,KAAK;IACtC,MAAMC,aAAa,GAAGpB,MAAM,CAACgB,MAAM,CAAEC,KAAK,IAAKA,KAAK,CAACT,IAAI,KAAKA,IAAI,CAACG,YAAY,CAAC,CAAC,CAAC;IAElF,IAAIQ,IAAI,KAAK,OAAO,IAAIC,aAAa,CAACC,MAAM,GAAG,CAAC,EAAE;MAChD,oBAAO7B,OAAA;QAAG8B,SAAS,EAAC,YAAY;QAAAC,QAAA,EAAEH,aAAa,CAACC;MAAM;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAC7D;IAEA,OAAO,IAAI;EACb,CAAC;EAED,oBACEnC,OAAA;IAAK8B,SAAS,EAAC,2BAA2B;IAAAC,QAAA,gBACxC/B,OAAA,CAACH,QAAQ;MACPuC,UAAU,EAAErB,eAAgB;MAC5BsB,KAAK,EAAElC,YAAa;MACpBuB,WAAW,EAAEA,WAAY;MACzBI,SAAS,EAAC;IAAiB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CAAC,EACD7B,WAAW,iBACVN,OAAA,CAACF,UAAU;MACTkB,IAAI,EAAEb,YAAa;MACnBmC,aAAa,EAAE9B,MAAM,CAAC+B,IAAI,CAAEd,KAAK,IAAKA,KAAK,CAACT,IAAI,KAAKb,YAAY,CAACgB,YAAY,CAAC,CAAC,CAAE;MAClFqB,UAAU,EAAEA,CAAA,KAAMjC,YAAY,CAAC,KAAK,CAAE;MACtCU,eAAe,EAAEA,eAAgB;MACjCM,iBAAiB,EAAEA;IAAkB;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CACF,eACDnC,OAAA;MAAK8B,SAAS,EAAC,YAAY;MAAAC,QAAA,gBAC/B/B,OAAA;QAAA+B,QAAA,GAAI,aAAW,EAAC5B,YAAY,CAACgB,YAAY,CAAC,CAAC;MAAA;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,EAChD3B,MAAM,CAACiC,GAAG,CAAEhB,KAAK,IAAK;QACrB,IAAIA,KAAK,CAACT,IAAI,KAAKb,YAAY,CAACgB,YAAY,CAAC,CAAC,EAAE;UAC9C,oBACEnB,OAAA;YAAA+B,QAAA,eACE/B,OAAA;cAAA+B,QAAA,eACE/B,OAAA;gBAAA+B,QAAA,EAAKN,KAAK,CAACL;cAAI;gBAAAY,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACnB;UAAC,GAHGV,KAAK,CAACT,IAAI;YAAAgB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAIf,CAAC;QAEV;QACA,OAAO,IAAI;MACb,CAAC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAEV,CAAC;AAACjC,EAAA,CA3EID,eAAe;AAAAyC,EAAA,GAAfzC,eAAe;AA6ErB,eAAeA,eAAe;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\college-website-project\\\\src\\\\EventManagement.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Calendar from 'react-calendar';\nimport EventModal from './EventModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventManagement = () => {\n  _s();\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [isModalOpen, setModalOpen] = useState(false);\n  const [events, setEvents] = useState([]);\n  useEffect(() => {\n    fetch('/api/events').then(response => response.json()).then(data => setEvents(data)).catch(error => console.error('Error fetching events:', error));\n  }, [isModalOpen]);\n  const handleDateClick = date => {\n    setSelectedDate(date);\n    setModalOpen(true);\n  };\n  const handleEventSave = () => {\n    const newEvent = {\n      date: selectedDate.toDateString(),\n      text: 'Your text here'\n    }; // Replace with actual text\n\n    fetch('/api/events', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newEvent)\n    }).then(response => response.json()).then(() => setModalOpen(false)).catch(error => console.error('Error saving event:', error));\n  };\n  const handleDeleteEvent = () => {\n    fetch(`/api/events?date=${selectedDate.toDateString()}`, {\n      method: 'DELETE'\n    }).then(() => setModalOpen(false)).catch(error => console.error('Error deleting event:', error));\n  };\n  const tileContent = ({\n    date,\n    view\n  }) => {\n    const eventsForDate = events.filter(event => event.date === date.toDateString());\n    if (view === 'month' && eventsForDate.length > 0) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"event-date\",\n        children: eventsForDate.length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 14\n      }, this);\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"custom-calendar-container\",\n    children: [/*#__PURE__*/_jsxDEV(Calendar, {\n      onClickDay: handleDateClick,\n      value: selectedDate,\n      tileContent: tileContent,\n      className: \"custom-calendar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), isModalOpen && /*#__PURE__*/_jsxDEV(EventModal, {\n      date: selectedDate,\n      existingEvent: events.find(event => event.date === selectedDate.toDateString()),\n      closeModal: () => setModalOpen(false),\n      handleEventSave: handleEventSave,\n      handleDeleteEvent: handleDeleteEvent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"event-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Events for \", selectedDate.toDateString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), events.filter(event => event.date === selectedDate.toDateString()).map(event => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: /*#__PURE__*/_jsxDEV(\"li\", {\n            children: event.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 15\n        }, this)\n      }, event._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(EventManagement, \"XtyP1GEwC5bU0k3LMOL1CFin8xs=\");\n_c = EventManagement;\nexport default EventManagement;\nvar _c;\n$RefreshReg$(_c, \"EventManagement\");","map":{"version":3,"names":["React","useState","useEffect","Calendar","EventModal","jsxDEV","_jsxDEV","EventManagement","_s","selectedDate","setSelectedDate","Date","isModalOpen","setModalOpen","events","setEvents","fetch","then","response","json","data","catch","error","console","handleDateClick","date","handleEventSave","newEvent","toDateString","text","method","headers","body","JSON","stringify","handleDeleteEvent","tileContent","view","eventsForDate","filter","event","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClickDay","value","existingEvent","find","closeModal","map","_id","_c","$RefreshReg$"],"sources":["D:/college-website-project/src/EventManagement.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport EventModal from './EventModal';\r\n\r\nconst EventManagement = () => {\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n  const [isModalOpen, setModalOpen] = useState(false);\r\n  const [events, setEvents] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch('/api/events')\r\n      .then((response) => response.json())\r\n      .then((data) => setEvents(data))\r\n      .catch((error) => console.error('Error fetching events:', error));\r\n  }, [isModalOpen]);\r\n\r\n  const handleDateClick = (date) => {\r\n    setSelectedDate(date);\r\n    setModalOpen(true);\r\n  };\r\n\r\n  const handleEventSave = () => {\r\n    const newEvent = { date: selectedDate.toDateString(), text: 'Your text here' }; // Replace with actual text\r\n\r\n    fetch('/api/events', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(newEvent),\r\n    })\r\n      .then((response) => response.json())\r\n      .then(() => setModalOpen(false))\r\n      .catch((error) => console.error('Error saving event:', error));\r\n  };\r\n\r\n  const handleDeleteEvent = () => {\r\n    fetch(`/api/events?date=${selectedDate.toDateString()}`, {\r\n      method: 'DELETE',\r\n    })\r\n      .then(() => setModalOpen(false))\r\n      .catch((error) => console.error('Error deleting event:', error));\r\n  };\r\n\r\n  const tileContent = ({ date, view }) => {\r\n    const eventsForDate = events.filter((event) => event.date === date.toDateString());\r\n\r\n    if (view === 'month' && eventsForDate.length > 0) {\r\n      return <p className=\"event-date\">{eventsForDate.length}</p>;\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <div className=\"custom-calendar-container\">\r\n      <Calendar\r\n        onClickDay={handleDateClick}\r\n        value={selectedDate}\r\n        tileContent={tileContent}\r\n        className=\"custom-calendar\"\r\n      />\r\n      {isModalOpen && (\r\n        <EventModal\r\n          date={selectedDate}\r\n          existingEvent={events.find((event) => event.date === selectedDate.toDateString())}\r\n          closeModal={() => setModalOpen(false)}\r\n          handleEventSave={handleEventSave}\r\n          handleDeleteEvent={handleDeleteEvent}\r\n        />\r\n      )}\r\n      <div className=\"event-list\">\r\n        <h4>Events for {selectedDate.toDateString()}</h4>\r\n        {events\r\n          .filter((event) => event.date === selectedDate.toDateString())\r\n          .map((event) => (\r\n            <div key={event._id}>\r\n              <ul>\r\n                <li>{event.text}</li>\r\n              </ul>\r\n            </div>\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EventManagement;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,gBAAgB;AACrC,OAAOC,UAAU,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,IAAIU,IAAI,CAAC,CAAC,CAAC;EAC5D,MAAM,CAACC,WAAW,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACa,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAExCC,SAAS,CAAC,MAAM;IACdc,KAAK,CAAC,aAAa,CAAC,CACjBC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAKL,SAAS,CAACK,IAAI,CAAC,CAAC,CAC/BC,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC,CAAC;EACrE,CAAC,EAAE,CAACV,WAAW,CAAC,CAAC;EAEjB,MAAMY,eAAe,GAAIC,IAAI,IAAK;IAChCf,eAAe,CAACe,IAAI,CAAC;IACrBZ,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC;EAED,MAAMa,eAAe,GAAGA,CAAA,KAAM;IAC5B,MAAMC,QAAQ,GAAG;MAAEF,IAAI,EAAEhB,YAAY,CAACmB,YAAY,CAAC,CAAC;MAAEC,IAAI,EAAE;IAAiB,CAAC,CAAC,CAAC;;IAEhFb,KAAK,CAAC,aAAa,EAAE;MACnBc,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ;IAC/B,CAAC,CAAC,CACCV,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAC,MAAMJ,YAAY,CAAC,KAAK,CAAC,CAAC,CAC/BQ,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC,CAAC;EAClE,CAAC;EAED,MAAMa,iBAAiB,GAAGA,CAAA,KAAM;IAC9BnB,KAAK,CAAE,oBAAmBP,YAAY,CAACmB,YAAY,CAAC,CAAE,EAAC,EAAE;MACvDE,MAAM,EAAE;IACV,CAAC,CAAC,CACCb,IAAI,CAAC,MAAMJ,YAAY,CAAC,KAAK,CAAC,CAAC,CAC/BQ,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC,CAAC;EACpE,CAAC;EAED,MAAMc,WAAW,GAAGA,CAAC;IAAEX,IAAI;IAAEY;EAAK,CAAC,KAAK;IACtC,MAAMC,aAAa,GAAGxB,MAAM,CAACyB,MAAM,CAAEC,KAAK,IAAKA,KAAK,CAACf,IAAI,KAAKA,IAAI,CAACG,YAAY,CAAC,CAAC,CAAC;IAElF,IAAIS,IAAI,KAAK,OAAO,IAAIC,aAAa,CAACG,MAAM,GAAG,CAAC,EAAE;MAChD,oBAAOnC,OAAA;QAAGoC,SAAS,EAAC,YAAY;QAAAC,QAAA,EAAEL,aAAa,CAACG;MAAM;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAC7D;IAEA,OAAO,IAAI;EACb,CAAC;EAED,oBACEzC,OAAA;IAAKoC,SAAS,EAAC,2BAA2B;IAAAC,QAAA,gBACxCrC,OAAA,CAACH,QAAQ;MACP6C,UAAU,EAAExB,eAAgB;MAC5ByB,KAAK,EAAExC,YAAa;MACpB2B,WAAW,EAAEA,WAAY;MACzBM,SAAS,EAAC;IAAiB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CAAC,EACDnC,WAAW,iBACVN,OAAA,CAACF,UAAU;MACTqB,IAAI,EAAEhB,YAAa;MACnByC,aAAa,EAAEpC,MAAM,CAACqC,IAAI,CAAEX,KAAK,IAAKA,KAAK,CAACf,IAAI,KAAKhB,YAAY,CAACmB,YAAY,CAAC,CAAC,CAAE;MAClFwB,UAAU,EAAEA,CAAA,KAAMvC,YAAY,CAAC,KAAK,CAAE;MACtCa,eAAe,EAAEA,eAAgB;MACjCS,iBAAiB,EAAEA;IAAkB;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CACF,eACDzC,OAAA;MAAKoC,SAAS,EAAC,YAAY;MAAAC,QAAA,gBACzBrC,OAAA;QAAAqC,QAAA,GAAI,aAAW,EAAClC,YAAY,CAACmB,YAAY,CAAC,CAAC;MAAA;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,EAChDjC,MAAM,CACJyB,MAAM,CAAEC,KAAK,IAAKA,KAAK,CAACf,IAAI,KAAKhB,YAAY,CAACmB,YAAY,CAAC,CAAC,CAAC,CAC7DyB,GAAG,CAAEb,KAAK,iBACTlC,OAAA;QAAAqC,QAAA,eACErC,OAAA;UAAAqC,QAAA,eACErC,OAAA;YAAAqC,QAAA,EAAKH,KAAK,CAACX;UAAI;YAAAe,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnB;MAAC,GAHGP,KAAK,CAACc,GAAG;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAId,CACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACvC,EAAA,CAjFID,eAAe;AAAAgD,EAAA,GAAfhD,eAAe;AAmFrB,eAAeA,eAAe;AAAC,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
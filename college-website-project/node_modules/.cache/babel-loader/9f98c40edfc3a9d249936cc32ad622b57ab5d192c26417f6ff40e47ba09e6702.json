{"ast":null,"code":"var _jsxFileName = \"D:\\\\college-website-project\\\\src\\\\EventManagement.jsx\",\n  _s = $RefreshSig$();\n// CustomCalendar.js\nimport React, { useState, useEffect } from 'react';\nimport Calendar from 'react-calendar';\nimport EventModal from './EventModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomCalendar = () => {\n  _s();\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [isModalOpen, setModalOpen] = useState(false);\n  const [events, setEvents] = useState([]);\n  useEffect(() => {\n    // Fetch events for all dates from your data source\n    // For demonstration purposes, we'll use local storage\n    const storedEvents = JSON.parse(localStorage.getItem('events')) || [];\n    setEvents(storedEvents);\n  }, [isModalOpen]);\n  const handleDateClick = date => {\n    setSelectedDate(date);\n    setModalOpen(true);\n  };\n  const handleEventSave = () => {\n    // This function can be used to trigger fetching events after saving in the modal\n    const storedEvents = JSON.parse(localStorage.getItem('events')) || [];\n    setEvents(storedEvents);\n    setModalOpen(false); // Close the modal after saving\n  };\n  const tileContent = ({\n    date,\n    view\n  }) => {\n    const eventsForDate = events.filter(event => event.date === date.toDateString());\n    if (view === 'month' && eventsForDate.length > 0) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"event-date\",\n        children: eventsForDate.length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 14\n      }, this);\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"custom-calendar-container\",\n    children: [/*#__PURE__*/_jsxDEV(Calendar, {\n      onClickDay: handleDateClick,\n      value: selectedDate,\n      tileContent: tileContent,\n      className: \"custom-calendar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), isModalOpen && /*#__PURE__*/_jsxDEV(EventModal, {\n      date: selectedDate,\n      closeModal: () => setModalOpen(false),\n      handleEventSave: handleEventSave\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"event-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Events for \", selectedDate.toDateString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), events.map(event => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: event.date\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: /*#__PURE__*/_jsxDEV(\"li\", {\n            children: event.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this)]\n      }, event.date, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(CustomCalendar, \"XtyP1GEwC5bU0k3LMOL1CFin8xs=\");\n_c = CustomCalendar;\nexport default CustomCalendar;\nvar _c;\n$RefreshReg$(_c, \"CustomCalendar\");","map":{"version":3,"names":["React","useState","useEffect","Calendar","EventModal","jsxDEV","_jsxDEV","CustomCalendar","_s","selectedDate","setSelectedDate","Date","isModalOpen","setModalOpen","events","setEvents","storedEvents","JSON","parse","localStorage","getItem","handleDateClick","date","handleEventSave","tileContent","view","eventsForDate","filter","event","toDateString","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClickDay","value","closeModal","map","text","_c","$RefreshReg$"],"sources":["D:/college-website-project/src/EventManagement.jsx"],"sourcesContent":["// CustomCalendar.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport EventModal from './EventModal';\r\n\r\nconst CustomCalendar = () => {\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n  const [isModalOpen, setModalOpen] = useState(false);\r\n  const [events, setEvents] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Fetch events for all dates from your data source\r\n    // For demonstration purposes, we'll use local storage\r\n    const storedEvents = JSON.parse(localStorage.getItem('events')) || [];\r\n    setEvents(storedEvents);\r\n  }, [isModalOpen]);\r\n\r\n  const handleDateClick = (date) => {\r\n    setSelectedDate(date);\r\n    setModalOpen(true);\r\n  };\r\n\r\n  const handleEventSave = () => {\r\n    // This function can be used to trigger fetching events after saving in the modal\r\n    const storedEvents = JSON.parse(localStorage.getItem('events')) || [];\r\n    setEvents(storedEvents);\r\n    setModalOpen(false); // Close the modal after saving\r\n  };\r\n\r\n  const tileContent = ({ date, view }) => {\r\n    const eventsForDate = events.filter((event) => event.date === date.toDateString());\r\n\r\n    if (view === 'month' && eventsForDate.length > 0) {\r\n      return <p className=\"event-date\">{eventsForDate.length}</p>;\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <div className=\"custom-calendar-container\">\r\n      <Calendar\r\n        onClickDay={handleDateClick}\r\n        value={selectedDate}\r\n        tileContent={tileContent}\r\n        className=\"custom-calendar\"\r\n      />\r\n      {isModalOpen && (\r\n        <EventModal\r\n          date={selectedDate}\r\n          closeModal={() => setModalOpen(false)}\r\n          handleEventSave={handleEventSave}\r\n        />\r\n      )}\r\n      <div className=\"event-list\">\r\n        <h4>Events for {selectedDate.toDateString()}</h4>\r\n        {events.map((event) => (\r\n          <div key={event.date}>\r\n            <p>{event.date}</p>\r\n            <ul>\r\n              <li>{event.text}</li>\r\n            </ul>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CustomCalendar;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"D:\\\\college-website-project\\\\src\\\\EventModal.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n\n// const EventModal = ({ date, existingEvent, closeModal, handleEventSave, handleDeleteEvent }) => {\n//   const [eventText, setEventText] = useState('');\n//   const [currentEvent, setCurrentEvent] = useState(existingEvent);\n\n//   useEffect(() => {\n//     if (existingEvent) {\n//       setCurrentEvent(existingEvent);\n//       setEventText(existingEvent.text);\n//     } else {\n//       setCurrentEvent(null);\n//       setEventText('');\n//     }\n//   }, [date, existingEvent]);\n\n//   const handleSaveEvent = () => {\n//     const newEvent = { date: date.toDateString(), text: eventText };\n\n//     fetch('/api/events', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify(newEvent),\n//     })\n//       .then((response) => response.json())\n//       .then(() => {\n//         console.log('Event saved successfully!');\n//         handleEventSave(date);\n//         closeModal();\n//       })\n//       .catch((error) => {\n//         console.error('Error saving event:', error);\n//       });\n//   };\n\n//   return (\n//     <div className=\"modal\">\n//       <div className=\"modal-content\">\n//         <span className=\"close\" onClick={closeModal}>&times;</span>\n//         <h3>{currentEvent ? 'Edit Event' : 'Add Event'} for {date.toDateString()}</h3>\n//         <textarea\n//           value={eventText}\n//           onChange={(e) => setEventText(e.target.value)}\n//           placeholder=\"Enter event description\"\n//         />\n//         <button onClick={handleSaveEvent}>{currentEvent ? 'Update Event' : 'Save Event'}</button>\n//         {currentEvent && (\n//           <div>\n//             <button onClick={handleDeleteEvent} className=\"delete-event-btn\">Delete Event</button>\n//             <button onClick={() => setCurrentEvent(null)}>Add Another Event</button>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default EventModal;\n\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n// import EventCalendar from './EventCalender';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventForm = ({\n  onAddEvent,\n  selectedDate,\n  setSelectedDate\n}) => {\n  _s();\n  const [title, setTitle] = useState('');\n  const handleTitleChange = e => {\n    setTitle(e.target.value);\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    onAddEvent({\n      title,\n      date: selectedDate.toDateString()\n    });\n    setTitle('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Event Title:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: title,\n        onChange: handleTitleChange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Event Date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        value: selectedDate.toDateString(),\n        onChange: e => setSelectedDate(new Date(e.target.value))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Add Event\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/viewevent\",\n      children: \"view Event\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(EventForm, \"MYNoGbxGn41vHCoLeDH6SYxb4UA=\");\n_c = EventForm;\nexport default EventForm;\nvar _c;\n$RefreshReg$(_c, \"EventForm\");","map":{"version":3,"names":["React","useState","Link","jsxDEV","_jsxDEV","EventForm","onAddEvent","selectedDate","setSelectedDate","_s","title","setTitle","handleTitleChange","e","target","value","handleSubmit","preventDefault","date","toDateString","onSubmit","children","type","onChange","required","fileName","_jsxFileName","lineNumber","columnNumber","Date","to","_c","$RefreshReg$"],"sources":["D:/college-website-project/src/EventModal.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n\r\n// const EventModal = ({ date, existingEvent, closeModal, handleEventSave, handleDeleteEvent }) => {\r\n//   const [eventText, setEventText] = useState('');\r\n//   const [currentEvent, setCurrentEvent] = useState(existingEvent);\r\n\r\n//   useEffect(() => {\r\n//     if (existingEvent) {\r\n//       setCurrentEvent(existingEvent);\r\n//       setEventText(existingEvent.text);\r\n//     } else {\r\n//       setCurrentEvent(null);\r\n//       setEventText('');\r\n//     }\r\n//   }, [date, existingEvent]);\r\n\r\n//   const handleSaveEvent = () => {\r\n//     const newEvent = { date: date.toDateString(), text: eventText };\r\n\r\n//     fetch('/api/events', {\r\n//       method: 'POST',\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//       },\r\n//       body: JSON.stringify(newEvent),\r\n//     })\r\n//       .then((response) => response.json())\r\n//       .then(() => {\r\n//         console.log('Event saved successfully!');\r\n//         handleEventSave(date);\r\n//         closeModal();\r\n//       })\r\n//       .catch((error) => {\r\n//         console.error('Error saving event:', error);\r\n//       });\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"modal\">\r\n//       <div className=\"modal-content\">\r\n//         <span className=\"close\" onClick={closeModal}>&times;</span>\r\n//         <h3>{currentEvent ? 'Edit Event' : 'Add Event'} for {date.toDateString()}</h3>\r\n//         <textarea\r\n//           value={eventText}\r\n//           onChange={(e) => setEventText(e.target.value)}\r\n//           placeholder=\"Enter event description\"\r\n//         />\r\n//         <button onClick={handleSaveEvent}>{currentEvent ? 'Update Event' : 'Save Event'}</button>\r\n//         {currentEvent && (\r\n//           <div>\r\n//             <button onClick={handleDeleteEvent} className=\"delete-event-btn\">Delete Event</button>\r\n//             <button onClick={() => setCurrentEvent(null)}>Add Another Event</button>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default EventModal;\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n// import EventCalendar from './EventCalender';\r\nconst EventForm = ({ onAddEvent, selectedDate, setSelectedDate }) => {\r\n  const [title, setTitle] = useState('');\r\n\r\n  const handleTitleChange = (e) => {\r\n    setTitle(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    onAddEvent({ title, date: selectedDate.toDateString() });\r\n    setTitle('');\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label>\r\n        Event Title:\r\n        <input type=\"text\" value={title} onChange={handleTitleChange} required />\r\n      </label>\r\n      <label>\r\n        Event Date:\r\n        {/* Allow users to select a date */}\r\n        <input type=\"date\" value={selectedDate.toDateString()} onChange={(e) => setSelectedDate(new Date(e.target.value))} />\r\n      </label>\r\n      <button type=\"submit\">Add Event</button>\r\n      <Link  to=\"/viewevent\">view Event</Link>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default EventForm;"],"mappings":";;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,IAAI,QAAQ,kBAAkB;AACvC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,SAAS,GAAGA,CAAC;EAAEC,UAAU;EAAEC,YAAY;EAAEC;AAAgB,CAAC,KAAK;EAAAC,EAAA;EACnE,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMW,iBAAiB,GAAIC,CAAC,IAAK;IAC/BF,QAAQ,CAACE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC1B,CAAC;EAED,MAAMC,YAAY,GAAIH,CAAC,IAAK;IAC1BA,CAAC,CAACI,cAAc,CAAC,CAAC;IAClBX,UAAU,CAAC;MAAEI,KAAK;MAAEQ,IAAI,EAAEX,YAAY,CAACY,YAAY,CAAC;IAAE,CAAC,CAAC;IACxDR,QAAQ,CAAC,EAAE,CAAC;EACd,CAAC;EAED,oBACEP,OAAA;IAAMgB,QAAQ,EAAEJ,YAAa;IAAAK,QAAA,gBAC3BjB,OAAA;MAAAiB,QAAA,GAAO,cAEL,eAAAjB,OAAA;QAAOkB,IAAI,EAAC,MAAM;QAACP,KAAK,EAAEL,KAAM;QAACa,QAAQ,EAAEX,iBAAkB;QAACY,QAAQ;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpE,CAAC,eACRxB,OAAA;MAAAiB,QAAA,GAAO,aAEL,eACAjB,OAAA;QAAOkB,IAAI,EAAC,MAAM;QAACP,KAAK,EAAER,YAAY,CAACY,YAAY,CAAC,CAAE;QAACI,QAAQ,EAAGV,CAAC,IAAKL,eAAe,CAAC,IAAIqB,IAAI,CAAChB,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;MAAE;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChH,CAAC,eACRxB,OAAA;MAAQkB,IAAI,EAAC,QAAQ;MAAAD,QAAA,EAAC;IAAS;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACxCxB,OAAA,CAACF,IAAI;MAAE4B,EAAE,EAAC,YAAY;MAAAT,QAAA,EAAC;IAAU;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpC,CAAC;AAEX,CAAC;AAACnB,EAAA,CA5BIJ,SAAS;AAAA0B,EAAA,GAAT1B,SAAS;AA8Bf,eAAeA,SAAS;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
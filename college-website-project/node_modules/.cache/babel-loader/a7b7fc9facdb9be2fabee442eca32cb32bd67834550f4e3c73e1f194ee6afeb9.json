{"ast":null,"code":"var _jsxFileName = \"D:\\\\college-website-project\\\\src\\\\EventManagement.jsx\",\n  _s = $RefreshSig$();\n// EventManagement.jsx\nimport React, { useState, useEffect } from 'react';\nimport Calendar from 'react-calendar';\nimport EventModal from './EventModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventManagement = () => {\n  _s();\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [isModalOpen, setModalOpen] = useState(false);\n  const [events, setEvents] = useState([]);\n  const handleDateClick = date => {\n    setSelectedDate(date);\n    setModalOpen(true); // Open the modal when a date is clicked\n  };\n  useEffect(() => {\n    fetchEvents();\n  }, []);\n  const fetchEvents = async () => {\n    try {\n      const response = await fetch('/api/events');\n      if (!response.ok) {\n        throw new Error(`Error fetching events: ${response.statusText}`);\n      }\n      const contentType = response.headers.get('content-type');\n      if (!contentType || !contentType.includes('application/json')) {\n        console.error('Invalid content type. Expected JSON.');\n        return; // Don't proceed further if the content type is not JSON.\n      }\n      const data = await response.json();\n      if (!Array.isArray(data)) {\n        throw new Error('Invalid response format: expected an array');\n      }\n      setEvents(data);\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n  const handleEventSave = async (eventName, eventDescription) => {\n    try {\n      const response = await fetch('/api/events', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          date: selectedDate.toDateString(),\n          eventName,\n          eventDescription\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Error saving event: ${response.statusText}`);\n      }\n      console.log('Event saved successfully!');\n      setModalOpen(false);\n      fetchEvents();\n    } catch (error) {\n      console.error('Error saving event:', error.message);\n    }\n  };\n  const handleDeleteEvent = async eventId => {\n    try {\n      const response = await fetch(`/api/events/${eventId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error(`Error deleting event: ${response.statusText}`);\n      }\n      console.log('Event deleted successfully!');\n      fetchEvents();\n    } catch (error) {\n      console.error('Error deleting event:', error.message);\n    }\n  };\n  const tileContent = ({\n    date\n  }) => {\n    const eventsForDate = events.filter(event => event.date === date.toDateString());\n    if (eventsForDate.length > 0) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"event-date\",\n        children: eventsForDate.length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 14\n      }, this);\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"admin-calendar-container\",\n    children: [/*#__PURE__*/_jsxDEV(Calendar, {\n      onClickDay: handleDateClick // Pass handleDateClick function to onClickDay prop\n      ,\n      value: selectedDate,\n      tileContent: tileContent,\n      className: \"admin-calendar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), isModalOpen && /*#__PURE__*/_jsxDEV(EventModal, {\n      date: selectedDate,\n      existingEvent: events.find(event => event.date === selectedDate.toDateString()),\n      closeModal: () => setModalOpen(false),\n      handleEventSave: (eventName, eventDescription) => handleEventSave(eventName, eventDescription),\n      handleDeleteEvent: eventId => handleDeleteEvent(eventId)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s(EventManagement, \"XtyP1GEwC5bU0k3LMOL1CFin8xs=\");\n_c = EventManagement;\nexport default EventManagement;\nvar _c;\n$RefreshReg$(_c, \"EventManagement\");","map":{"version":3,"names":["React","useState","useEffect","Calendar","EventModal","jsxDEV","_jsxDEV","EventManagement","_s","selectedDate","setSelectedDate","Date","isModalOpen","setModalOpen","events","setEvents","handleDateClick","date","fetchEvents","response","fetch","ok","Error","statusText","contentType","headers","get","includes","console","error","data","json","Array","isArray","message","handleEventSave","eventName","eventDescription","method","body","JSON","stringify","toDateString","log","handleDeleteEvent","eventId","tileContent","eventsForDate","filter","event","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClickDay","value","existingEvent","find","closeModal","_c","$RefreshReg$"],"sources":["D:/college-website-project/src/EventManagement.jsx"],"sourcesContent":["// EventManagement.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport EventModal from './EventModal';\r\n\r\nconst EventManagement = () => {\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n  const [isModalOpen, setModalOpen] = useState(false);\r\n  const [events, setEvents] = useState([]);\r\n\r\n  const handleDateClick = (date) => {\r\n    setSelectedDate(date);\r\n    setModalOpen(true); // Open the modal when a date is clicked\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchEvents();\r\n  }, []);\r\n\r\n  const fetchEvents = async () => {\r\n    try {\r\n      const response = await fetch('/api/events');\r\n  \r\n      if (!response.ok) {\r\n        throw new Error(`Error fetching events: ${response.statusText}`);\r\n      }\r\n  \r\n      const contentType = response.headers.get('content-type');\r\n      if (!contentType || !contentType.includes('application/json')) {\r\n        console.error('Invalid content type. Expected JSON.');\r\n        return; // Don't proceed further if the content type is not JSON.\r\n      }\r\n  \r\n      const data = await response.json();\r\n      if (!Array.isArray(data)) {\r\n        throw new Error('Invalid response format: expected an array');\r\n      }\r\n  \r\n      setEvents(data);\r\n    } catch (error) {\r\n      console.error(error.message);\r\n    }\r\n  };\r\n  \r\n\r\n  const handleEventSave = async (eventName, eventDescription) => {\r\n    try {\r\n      const response = await fetch('/api/events', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          date: selectedDate.toDateString(),\r\n          eventName,\r\n          eventDescription,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Error saving event: ${response.statusText}`);\r\n      }\r\n\r\n      console.log('Event saved successfully!');\r\n      setModalOpen(false);\r\n      fetchEvents();\r\n    } catch (error) {\r\n      console.error('Error saving event:', error.message);\r\n    }\r\n  };\r\n\r\n  const handleDeleteEvent = async (eventId) => {\r\n    try {\r\n      const response = await fetch(`/api/events/${eventId}`, {\r\n        method: 'DELETE',\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Error deleting event: ${response.statusText}`);\r\n      }\r\n\r\n      console.log('Event deleted successfully!');\r\n      fetchEvents();\r\n    } catch (error) {\r\n      console.error('Error deleting event:', error.message);\r\n    }\r\n  };\r\n\r\n  const tileContent = ({ date }) => {\r\n    const eventsForDate = events.filter((event) => event.date === date.toDateString());\r\n\r\n    if (eventsForDate.length > 0) {\r\n      return <p className=\"event-date\">{eventsForDate.length}</p>;\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <div className=\"admin-calendar-container\">\r\n      <Calendar\r\n        onClickDay={handleDateClick} // Pass handleDateClick function to onClickDay prop\r\n        value={selectedDate}\r\n        tileContent={tileContent}\r\n        className=\"admin-calendar\"\r\n      />\r\n      {isModalOpen && (\r\n        <EventModal\r\n          date={selectedDate}\r\n          existingEvent={events.find((event) => event.date === selectedDate.toDateString())}\r\n          closeModal={() => setModalOpen(false)}\r\n          handleEventSave={(eventName, eventDescription) =>\r\n            handleEventSave(eventName, eventDescription)\r\n          }\r\n          handleDeleteEvent={(eventId) => handleDeleteEvent(eventId)}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EventManagement;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
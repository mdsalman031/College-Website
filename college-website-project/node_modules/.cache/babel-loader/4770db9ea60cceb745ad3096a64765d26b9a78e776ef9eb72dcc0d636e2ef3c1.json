{"ast":null,"code":"var _jsxFileName = \"D:\\\\college-website-project\\\\src\\\\EventManagement.jsx\",\n  _s = $RefreshSig$();\n// CustomCalendar.js\nimport React, { useState } from 'react';\nimport Calendar from 'react-calendar';\nimport EventModal from './EventModal';\nimport './CustomCalendar.css'; // Import your styles\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomCalendar = () => {\n  _s();\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [isModalOpen, setModalOpen] = useState(false);\n  const handleDateClick = date => {\n    setSelectedDate(date);\n    setModalOpen(true);\n  };\n  const tileContent = ({\n    date,\n    view\n  }) => {\n    // Fetch events for the current date from your data source\n    // For demonstration purposes, we'll use local storage\n    const storedEvents = JSON.parse(localStorage.getItem('events')) || [];\n    const eventsForDate = storedEvents.filter(event => event.date === date.toDateString());\n    if (view === 'month' && eventsForDate.length > 0) {\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"event-date\",\n        children: eventsForDate.length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 14\n      }, this);\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"custom-calendar-container\",\n    children: [/*#__PURE__*/_jsxDEV(Calendar, {\n      onClickDay: handleDateClick,\n      value: selectedDate,\n      tileContent: tileContent,\n      className: \"custom-calendar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), isModalOpen && /*#__PURE__*/_jsxDEV(EventModal, {\n      date: selectedDate,\n      closeModal: () => setModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(CustomCalendar, \"hHy9H+Gl744PjtyucN+/SuuAxWo=\");\n_c = CustomCalendar;\nexport default CustomCalendar;\nvar _c;\n$RefreshReg$(_c, \"CustomCalendar\");","map":{"version":3,"names":["React","useState","Calendar","EventModal","jsxDEV","_jsxDEV","CustomCalendar","_s","selectedDate","setSelectedDate","Date","isModalOpen","setModalOpen","handleDateClick","date","tileContent","view","storedEvents","JSON","parse","localStorage","getItem","eventsForDate","filter","event","toDateString","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClickDay","value","closeModal","_c","$RefreshReg$"],"sources":["D:/college-website-project/src/EventManagement.jsx"],"sourcesContent":["// CustomCalendar.js\r\nimport React, { useState } from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport EventModal from './EventModal';\r\nimport './CustomCalendar.css'; // Import your styles\r\n\r\nconst CustomCalendar = () => {\r\n  const [selectedDate, setSelectedDate] = useState(new Date());\r\n  const [isModalOpen, setModalOpen] = useState(false);\r\n\r\n  const handleDateClick = (date) => {\r\n    setSelectedDate(date);\r\n    setModalOpen(true);\r\n  };\r\n\r\n  const tileContent = ({ date, view }) => {\r\n    // Fetch events for the current date from your data source\r\n    // For demonstration purposes, we'll use local storage\r\n    const storedEvents = JSON.parse(localStorage.getItem('events')) || [];\r\n    const eventsForDate = storedEvents.filter((event) => event.date === date.toDateString());\r\n\r\n    if (view === 'month' && eventsForDate.length > 0) {\r\n      return <p className=\"event-date\">{eventsForDate.length}</p>;\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  return (\r\n    <div className=\"custom-calendar-container\">\r\n      <Calendar\r\n        onClickDay={handleDateClick}\r\n        value={selectedDate}\r\n        tileContent={tileContent}\r\n        className=\"custom-calendar\"\r\n      />\r\n      {isModalOpen && (\r\n        <EventModal\r\n          date={selectedDate}\r\n          closeModal={() => setModalOpen(false)}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CustomCalendar;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,QAAQ,MAAM,gBAAgB;AACrC,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAO,sBAAsB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAC,IAAIS,IAAI,CAAC,CAAC,CAAC;EAC5D,MAAM,CAACC,WAAW,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAEnD,MAAMY,eAAe,GAAIC,IAAI,IAAK;IAChCL,eAAe,CAACK,IAAI,CAAC;IACrBF,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC;EAED,MAAMG,WAAW,GAAGA,CAAC;IAAED,IAAI;IAAEE;EAAK,CAAC,KAAK;IACtC;IACA;IACA,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE;IACrE,MAAMC,aAAa,GAAGL,YAAY,CAACM,MAAM,CAAEC,KAAK,IAAKA,KAAK,CAACV,IAAI,KAAKA,IAAI,CAACW,YAAY,CAAC,CAAC,CAAC;IAExF,IAAIT,IAAI,KAAK,OAAO,IAAIM,aAAa,CAACI,MAAM,GAAG,CAAC,EAAE;MAChD,oBAAOrB,OAAA;QAAGsB,SAAS,EAAC,YAAY;QAAAC,QAAA,EAAEN,aAAa,CAACI;MAAM;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAC7D;IAEA,OAAO,IAAI;EACb,CAAC;EAED,oBACE3B,OAAA;IAAKsB,SAAS,EAAC,2BAA2B;IAAAC,QAAA,gBACxCvB,OAAA,CAACH,QAAQ;MACP+B,UAAU,EAAEpB,eAAgB;MAC5BqB,KAAK,EAAE1B,YAAa;MACpBO,WAAW,EAAEA,WAAY;MACzBY,SAAS,EAAC;IAAiB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CAAC,EACDrB,WAAW,iBACVN,OAAA,CAACF,UAAU;MACTW,IAAI,EAAEN,YAAa;MACnB2B,UAAU,EAAEA,CAAA,KAAMvB,YAAY,CAAC,KAAK;IAAE;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvC,CACF;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACzB,EAAA,CAtCID,cAAc;AAAA8B,EAAA,GAAd9B,cAAc;AAwCpB,eAAeA,cAAc;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}